version: 2.1

orbs:
  ssh-deployment: singularitynet/ssh-deployment@2.4.1

jobs:
  cntk-image-recon:
    docker:
      - image: circleci/python:3.6.6-node
    steps:
      - checkout
      - ssh-deployment/deploy:
          ssh-host: ${SSH_HOST_CNTK_IMAGE_RECON}
          ssh-user: ${SSH_USER_CNTK_IMAGE_RECON}
          service-dir: "services/cntk-image-recon"
          mainnet-port: "7015"
          testnet-port: "7054"
          run-command: "source '/cntk/activate-cntk';python3 run_service.py --ssl"
          docker-test-files: "Dockerfile, requirements.txt"
          docker-file-path: "services/cntk-image-recon/Dockerfile"
          docker-no-cache: true
          docker-image: "cntk_image_recognition"
          docker-container: "CNTK_IMAGE_RECON"
          docker-nvidia: true
          docker-volumes: "-v ~/singnet/.certs:/opt/singnet/.certs"
          infura-api-key: ${INFURA_API_KEY}
          daemon-version: ${CI_SNETD_VERSION}
          daemon-pk: ${PK_CNTK_IMAGE_RECON}
  deepfakes-faceswap:
    docker:
      - image: circleci/python:3.6.6-node
    steps:
      - checkout
      - ssh-deployment/deploy:
          ssh-host: ${SSH_HOST_DEEPFAKES_FACESWAP}
          ssh-user: ${SSH_USER_DEEPFAKES_FACESWAP}
          service-dir: "services/deepfakes-faceswap"
          mainnet-port: "7021"
          testnet-port: "7061-7062"
          run-command: "python3 run_service.py --ssl"
          docker-test-files: "Dockerfile, requirements.txt"
          docker-file-path: "services/deepfakes-faceswap/Dockerfile"
          docker-no-cache: true
          docker-image: "deepfakes_faceswap"
          docker-container: "DEEPFAKES_FACESWAP"
          docker-nvidia: true
          docker-volumes: "-v ~/singnet/.certs:/opt/singnet/.certs -v ~/storage:/opt/storage"
          infura-api-key: ${INFURA_API_KEY}
          daemon-version: ${CI_SNETD_VERSION}
          daemon-pk: ${PK_DEEPFAKES_FACESWAP}
  deoldify-colorizer:
    docker:
      - image: circleci/python:3.6.6-node
    steps:
      - checkout
      - ssh-deployment/deploy:
          ssh-host: ${SSH_HOST_DEOLDIFY_COLORIZER}
          ssh-user: ${SSH_USER_DEOLDIFY_COLORIZER}
          service-dir: "services/deoldify-colorizer"
          mainnet-port: "7037"
          testnet-port: "7085"
          run-command: "python3 run_service.py --ssl"
          docker-test-files: "Dockerfile, requirements.txt"
          docker-file-path: "services/deoldify-colorizer/Dockerfile"
          docker-no-cache: true
          docker-image: "deoldify_colorizer"
          docker-container: "DEOLDIFY_COLORIZER"
          docker-nvidia: true
          docker-volumes: "-v ~/singnet/.certs:/opt/singnet/.certs"
          infura-api-key: ${INFURA_API_KEY}
          daemon-version: ${CI_SNETD_VERSION}
          daemon-pk: ${PK_DEOLDIFY_COLORIZER}
  i3d-video-action-recognition:
    docker:
      - image: circleci/python:3.6.6-node
    steps:
      - checkout
      - ssh-deployment/deploy:
          ssh-host: ${SSH_HOST_I3D_VIDEO_ACTION_RECON}
          ssh-user: ${SSH_USER_I3D_VIDEO_ACTION_RECON}
          service-dir: "services/i3d-video-action-recognition"
          mainnet-port: "7023"
          testnet-port: "7055"
          run-command: "python3 run_service.py --ssl"
          docker-test-files: "Dockerfile, requirements.txt"
          docker-file-path: "services/i3d-video-action-recognition/Dockerfile"
          docker-no-cache: true
          docker-image: "i3d_video_action_recognition"
          docker-container: "I3D_VIDEO_ACTION_RECON"
          docker-nvidia: true
          docker-volumes: "-v ~/singnet/.certs:/opt/singnet/.certs"
          infura-api-key: ${INFURA_API_KEY}
          daemon-version: ${CI_SNETD_VERSION}
          daemon-pk: ${PK_I3D_VIDEO_ACTION_RECON}
  places365-scene-recognition:
    docker:
      - image: circleci/python:3.6.6-node
    steps:
      - checkout
      - ssh-deployment/deploy:
          ssh-host: ${SSH_HOST_PLACES365_SCENE_RECOGNITION}
          ssh-user: ${SSH_USER_PLACES365_SCENE_RECOGNITION}
          service-dir: "services/places365-scene-recognition"
          mainnet-port: "7027"
          testnet-port: "7079"
          run-command: "python3 run_service.py --ssl"
          docker-test-files: "Dockerfile, requirements.txt"
          docker-file-path: "services/places365-scene-recognition/Dockerfile"
          docker-no-cache: true
          docker-image: "places365_scene_recognition"
          docker-container: "PLACES365_SCENE_RECOGNITION"
          docker-nvidia: true
          docker-volumes: "-v ~/singnet/.certs:/opt/singnet/.certs"
          infura-api-key: ${INFURA_API_KEY}
          daemon-version: ${CI_SNETD_VERSION}
          daemon-pk: ${PK_PLACES365_SCENE_RECOGNITION}
  pneumonia-diagnosis:
    docker:
      - image: circleci/python:3.6.6-node
    steps:
      - checkout
      - ssh-deployment/deploy:
          ssh-host: ${SSH_HOST_PNEUMONIA_DIAGNOSIS}
          ssh-user: ${SSH_USER_PNEUMONIA_DIAGNOSIS}
          service-dir: "services/pneumonia-diagnosis"
          mainnet-port: "7028"
          testnet-port: "7062"
          run-command: "python3 run_service.py --ssl"
          docker-test-files: "Dockerfile, requirements.txt"
          docker-file-path: "services/pneumonia-diagnosis/Dockerfile"
          docker-no-cache: true
          docker-image: "pneumonia_diagnosis"
          docker-container: "PNEUMONIA_DIAGNOSIS"
          docker-nvidia: true
          docker-volumes: "-v ~/singnet/.certs:/opt/singnet/.certs"
          infura-api-key: ${INFURA_API_KEY}
          daemon-version: ${CI_SNETD_VERSION}
          daemon-pk: ${PK_PNEUMONIA_DIAGNOSIS}
  real-time-voice-cloning:
    docker:
      - image: circleci/python:3.6.6-node
    steps:
      - checkout
      - ssh-deployment/deploy:
          ssh-host: ${SSH_HOST_VOICE_CLONING}
          ssh-user: ${SSH_USER_VOICE_CLONING}
          service-dir: "services/real-time-voice-cloning"
          mainnet-port: "7036"
          testnet-port: "7065"
          run-command: "python3 run_service.py --ssl"
          docker-test-files: "Dockerfile, requirements.txt"
          docker-file-path: "services/real-time-voice-cloning/Dockerfile"
          docker-no-cache: true
          docker-image: "voice_cloning"
          docker-container: "VOICE_CLONING"
          docker-nvidia: true
          docker-volumes: "-v ~/singnet/.certs:/opt/singnet/.certs"
          infura-api-key: ${INFURA_API_KEY}
          daemon-version: ${CI_SNETD_VERSION}
          daemon-pk: ${PK_VOICE_CLONING}
  s2vt-video-captioning:
    docker:
      - image: circleci/python:3.6.6-node
    steps:
      - checkout
      - ssh-deployment/deploy:
          ssh-host: ${SSH_HOST_S2VT_VIDEO_CAPTIONING}
          ssh-user: ${SSH_USER_S2VT_VIDEO_CAPTIONING}
          service-dir: "services/s2vt-video-captioning"
          mainnet-port: "7029"
          testnet-port: "7056"
          run-command: "python run_service.py --ssl"
          docker-test-files: "Dockerfile, requirements.txt"
          docker-file-path: "services/s2vt-video-captioning/Dockerfile"
          docker-no-cache: true
          docker-image: "s2vt_video_captioning"
          docker-container: "S2VT_VIDEO_CAPTIONING"
          docker-nvidia: true
          docker-volumes: "-v ~/singnet/.certs:/opt/singnet/.certs"
          infura-api-key: ${INFURA_API_KEY}
          daemon-version: ${CI_SNETD_VERSION}
          daemon-pk: ${PK_S2VT_VIDEO_CAPTIONING}
  sound-spleeter:
    docker:
      - image: circleci/python:3.6.6-node
    steps:
      - checkout
      - ssh-deployment/deploy:
          ssh-host: ${SSH_HOST_SOUND_SPLEETER}
          ssh-user: ${SSH_USER_SOUND_SPLEETER}
          service-dir: "services/sound-spleeter"
          mainnet-port: "7068"
          testnet-port: "7067"
          run-command: "python3 run_service.py --ssl"
          docker-test-files: "Dockerfile, requirements.txt"
          docker-file-path: "services/sound-spleeter/Dockerfile"
          docker-no-cache: true
          docker-image: "sound_spleeter"
          docker-container: "SOUND_SPLEETER"
          docker-nvidia: true
          docker-volumes: "-v ~/singnet/.certs:/opt/singnet/.certs"
          infura-api-key: ${INFURA_API_KEY}
          daemon-version: ${CI_SNETD_VERSION}
          daemon-pk: ${PK_SOUND_SPLEETER}
  yolov3-object-detection:
    docker:
      - image: circleci/python:3.6.6-node
    steps:
      - checkout
      - ssh-deployment/deploy:
          ssh-host: ${SSH_HOST_YOLOv3_OBJECT_DETECTION}
          ssh-user: ${SSH_USER_YOLOv3_OBJECT_DETECTION}
          service-dir: "services/yolov3-object-detection"
          mainnet-port: "7034"
          testnet-port: "7057"
          run-command: "python3 run_service.py --ssl"
          docker-test-files: "Dockerfile, requirements.txt"
          docker-file-path: "services/yolov3-object-detection/Dockerfile"
          docker-no-cache: true
          docker-image: "yolov3_object_detection"
          docker-container: "YOLOv3_OBJECT_DETECTION"
          docker-nvidia: true
          docker-volumes: "-v ~/singnet/.certs:/opt/singnet/.certs"
          infura-api-key: ${INFURA_API_KEY}
          daemon-version: ${CI_SNETD_VERSION}
          daemon-pk: ${PK_YOLOv3_OBJECT_DETECTION}
  zeta36-chess-alpha-zero:
    docker:
      - image: circleci/python:3.6.6-node
    steps:
      - checkout
      - ssh-deployment/deploy:
          ssh-host: ${SSH_HOST_CHESS_ALPHA_ZERO}
          ssh-user: ${SSH_USER_CHESS_ALPHA_ZERO}
          service-dir: "services/zeta36-chess-alpha-zero"
          mainnet-port: "7035"
          testnet-port: "7058"
          run-command: "python3.6 run_service.py --ssl"
          docker-test-files: "Dockerfile, requirements.txt"
          docker-file-path: "services/zeta36-chess-alpha-zero/Dockerfile"
          docker-no-cache: true
          docker-image: "zeta36_chess_alpha_zero"
          docker-container: "CHESS_ALPHA_ZERO"
          docker-nvidia: true
          docker-volumes: "-v ~/singnet/.certs:/opt/singnet/.certs"
          infura-api-key: ${INFURA_API_KEY}
          daemon-version: ${CI_SNETD_VERSION}
          daemon-pk: ${PK_CHESS_ALPHA_ZERO}

  testing:
    docker:
      - image: circleci/python:3.6.6-node
    steps:
        - ssh-deployment/test:
              ssh-host: ${SSH_HOST_CNTK_IMAGE_RECON}
              ssh-user: ${SSH_USER_CNTK_IMAGE_RECON}
              test-command: "sleep 10;source '/cntk/activate-cntk';python3 test_service.py auto"
              docker-container: "CNTK_IMAGE_RECON"
        - ssh-deployment/test:
              ssh-host: ${SSH_HOST_DEOLDIFY_COLORIZER}
              ssh-user: ${SSH_USER_DEOLDIFY_COLORIZER}
              test-command: "sleep 10;python3 test_service.py auto"
              docker-container: "DEOLDIFY_COLORIZER"
        - ssh-deployment/test:
              ssh-host: ${SSH_HOST_I3D_VIDEO_ACTION_RECON}
              ssh-user: ${SSH_USER_I3D_VIDEO_ACTION_RECON}
              test-command: "sleep 10;python3 test_service.py auto"
              docker-container: "I3D_VIDEO_ACTION_RECON"
        - ssh-deployment/test:
              ssh-host: ${SSH_HOST_PLACES365_SCENE_RECOGNITION}
              ssh-user: ${SSH_USER_PLACES365_SCENE_RECOGNITION}
              test-command: "sleep 10;python3 test_service.py auto"
              docker-container: "PLACES365_SCENE_RECOGNITION"
        - ssh-deployment/test:
              ssh-host: ${SSH_HOST_VOICE_CLONING}
              ssh-user: ${SSH_USER_VOICE_CLONING}
              test-command: "sleep 10;python3 test_service.py auto"
              docker-container: "VOICE_CLONING"
        - ssh-deployment/test:
              ssh-host: ${SSH_HOST_S2VT_VIDEO_CAPTIONING}
              ssh-user: ${SSH_USER_S2VT_VIDEO_CAPTIONING}
              test-command: "sleep 10;python test_service.py auto"
              docker-container: "S2VT_VIDEO_CAPTIONING"
        - ssh-deployment/test:
              ssh-host: ${SSH_HOST_SOUND_SPLEETER}
              ssh-user: ${SSH_USER_SOUND_SPLEETER}
              test-command: "sleep 10;python3 test_service.py auto"
              docker-container: "SOUND_SPLEETER"
        - ssh-deployment/test:
              ssh-host: ${SSH_HOST_YOLOv3_OBJECT_DETECTION}
              ssh-user: ${SSH_USER_YOLOv3_OBJECT_DETECTION}
              test-command: "sleep 10;python3 test_service.py auto"
              docker-container: "YOLOv3_OBJECT_DETECTION"
        - ssh-deployment/test:
              ssh-host: ${SSH_HOST_CHESS_ALPHA_ZERO}
              ssh-user: ${SSH_USER_CHESS_ALPHA_ZERO}
              test-command: "sleep 10;python3.6 test_service.py auto"
              docker-container: "CHESS_ALPHA_ZERO"

workflows:
  build_deploy_dnn_services:
    jobs:
      - cntk-image-recon
#      - deepfakes-faceswap
      - deoldify-colorizer
      - i3d-video-action-recognition
      - places365-scene-recognition
#      - pneumonia-diagnosis
      - real-time-voice-cloning
      - s2vt-video-captioning
      - sound-spleeter
      - yolov3-object-detection
      - zeta36-chess-alpha-zero
      - testing:
            requires:
              - cntk-image-recon
              - deoldify-colorizer
              - i3d-video-action-recognition
              - places365-scene-recognition
              - real-time-voice-cloning
              - s2vt-video-captioning
              - sound-spleeter
              - yolov3-object-detection
              - zeta36-chess-alpha-zero